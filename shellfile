#!/bin/bash
set -e

################################################################################
# CONFIGURATION
################################################################################

DEPLOY_DIR="/var/www/html"
BACKUP_DIR="/var/www/backups"
SERVICE_USER="sapservice"
LOG_DIR="/var/log/app_log"
LOG_FILE="$LOG_DIR/deployment_$(date +%Y%m%d_%H%M%S).log"

################################################################################
# PARAMETER VALIDATION
################################################################################

if [ "$#" -lt 2 ]; then
  # Log file might not exist yet, echo to stderr as well
  echo "Usage: $0 <version_tag> <environment>" >&2
  # Attempt to log to file if possible
  mkdir -p "$LOG_DIR" && touch "$LOG_FILE" && chmod 666 "$LOG_FILE"
  echo "Usage: $0 <version_tag> <environment>" >> "$LOG_FILE"
  exit 1
fi

VERSION_TAG="$1"
ENVIRONMENT="$2"

################################################################################
# LOGGING SETUP
################################################################################

mkdir -p "$LOG_DIR"
chmod 755 "$LOG_DIR"
touch "$LOG_FILE"
chmod 666 "$LOG_FILE" # Consider 664 or 640 depending on group needs
ln -sf "$LOG_FILE" "$LOG_DIR/latest.log"  # Symlink to latest log

log_message() {
  local timestamp
  timestamp=$(date +%Y-%m-%d_%H:%M:%S)
  # Log to stdout (captured by SSM) and the log file
  echo "[$timestamp] $1" | tee -a "$LOG_FILE"
}

log_message "=== Deployment started for ENV=$ENVIRONMENT, VERSION_TAG=$VERSION_TAG ==="

################################################################################
# DETERMINE EXECUTION USER
################################################################################

if id "$SERVICE_USER" &>/dev/null; then
  EXEC_USER="$SERVICE_USER"
  log_message "Using service user '$SERVICE_USER' for application deployment"
else
  EXEC_USER="root"
  log_message "Service user '$SERVICE_USER' not found. Proceeding as root"
fi

################################################################################
# BACKUP
################################################################################

mkdir -p "$BACKUP_DIR"
BACKUP_FILE="$BACKUP_DIR/html_backup_$(date +%Y%m%d%H%M%S).tar.gz"
log_message "Backup started: $BACKUP_FILE"

# Run backup as the current user (likely root via SSM) which should have permissions
cd /var/www || { log_message "Error: Cannot cd to /var/www"; exit 1; }

BACKUP_START_TIME=$(date +%Y-%m-%d_%H:%M:%S)

# Exclude storage directory, log stderr to main log file
if ! tar --exclude='html/storage' -czf "$BACKUP_FILE" html 2>> "$LOG_FILE"; then
  log_message "Error: Backup failed at $BACKUP_START_TIME. Check log for tar errors."
  exit 1
fi

BACKUP_END_TIME=$(date +%Y-%m-%d_%H:%M:%S)
log_message "Backup completed at: $BACKUP_END_TIME"

################################################################################
# PREPARE GIT CHECKOUT COMMAND
################################################################################

TAKE_DOWN_APP=false
CHECKOUT_COMMAND="" # This will contain the actual git command string

if [ "$ENVIRONMENT" != "prod" ]; then
  BRANCH_NAME="${VERSION_TAG}-branch"
  # Check if branch exists using sudo
  if sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
    log_message "Branch '$BRANCH_NAME' exists. Will checkout."
    CHECKOUT_COMMAND="git checkout $BRANCH_NAME"
  else
    log_message "Creating branch '$BRANCH_NAME' from tag '$VERSION_TAG'"
    # Ensure the tag exists locally first before trying to create branch from it
    if ! sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" rev-parse --verify --quiet "tags/$VERSION_TAG"; then
        log_message "Tag '$VERSION_TAG' not found locally for branch creation. Fetching..."
        sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" fetch --tags origin # Fetch from origin explicitly
        if ! sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" rev-parse --verify --quiet "tags/$VERSION_TAG"; then
            log_message "ERROR: Tag '$VERSION_TAG' still not found after fetch. Aborting."
            exit 1
        fi
    fi
    CHECKOUT_COMMAND="git checkout tags/$VERSION_TAG -b $BRANCH_NAME"
    TAKE_DOWN_APP=true
  fi
else # Production environment
  # Check if tag exists locally
  if ! sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" rev-parse --verify --quiet "tags/$VERSION_TAG"; then
    log_message "Tag '$VERSION_TAG' not found locally. Fetching..."
    sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" fetch --tags origin # Fetch from origin explicitly
    if ! sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" rev-parse --verify --quiet "tags/$VERSION_TAG"; then
      log_message "ERROR: Tag '$VERSION_TAG' still not found after fetch. Aborting."
      exit 1
    fi
  fi
  log_message "Will checkout production tag: $VERSION_TAG"
  CHECKOUT_COMMAND="git checkout tags/$VERSION_TAG"
fi
log_message "Prepared checkout command: '$CHECKOUT_COMMAND'"

################################################################################
# APP MAINTENANCE MODE (IF NEEDED)
################################################################################

if $TAKE_DOWN_APP; then
  log_message "Putting application into maintenance mode..."
  # Log stderr as well
  sudo -u "$EXEC_USER" php "$DEPLOY_DIR/artisan" down >> "$LOG_FILE" 2>&1 || log_message "Warning: 'artisan down' command failed or produced errors."
fi

################################################################################
# DEPLOYMENT EXECUTION AS sapservice OR root (Integrated)
################################################################################

# Export variables needed inside the subshell invoked by sudo bash -c
export DEPLOY_DIR LOG_FILE CHECKOUT_COMMAND

log_message "Executing deployment commands as $EXEC_USER..."
# Use sudo -E to preserve exported environment variables for the target user
# Use bash -c '...' to execute a block of commands within that user's context
if ! sudo -E -u "$EXEC_USER" bash -c '
  # Subshell starts here
  set -e # Ensure subshell exits on error

  # Log function within subshell (optional, could rely on outer script logging)
  log_sub() {
    echo "[$(date +%Y-%m-%d_%H:%M:%S)] (SubShell) $1" | tee -a "$LOG_FILE"
  }

  log_sub "Changing directory to $DEPLOY_DIR"
  cd "$DEPLOY_DIR" || { echo "ERROR: Failed to cd to $DEPLOY_DIR" >&2; exit 1; } # Exit subshell if cd fails

  log_sub "Fetching from Git..."
  git fetch origin >> "$LOG_FILE" 2>&1 # Fetch from origin explicitly, log output

  log_sub "Checking out code using command: $CHECKOUT_COMMAND"
  # Execute the checkout command string, log output
  eval "$CHECKOUT_COMMAND" >> "$LOG_FILE" 2>&1

  log_sub "Installing composer dependencies..."
  composer install --no-interaction --prefer-dist --optimize-autoloader >> "$LOG_FILE" 2>&1

  log_sub "Running migrations..."
  php artisan migrate --force >> "$LOG_FILE" 2>&1

  log_sub "Clearing cache..."
  php artisan cache:clear >> "$LOG_FILE" 2>&1
  php artisan route:clear >> "$LOG_FILE" 2>&1
  php artisan config:clear >> "$LOG_FILE" 2>&1
  php artisan view:clear >> "$LOG_FILE" 2>&1

  log_sub "Deployment commands finished successfully."
  # Subshell ends here
'; then
  # This block executes if the sudo command itself fails (e.g., user doesn't exist, permission denied)
  # OR if any command inside the 'bash -c' block fails due to 'set -e'
  log_message "ERROR: Deployment command block failed. Check log file $LOG_FILE for details."
  # Consider adding S3 upload here too for failed deployment logs
  # aws s3 cp "$LOG_FILE" "s3://${S3_BUCKET}/deployment-logs/$ENVIRONMENT/FAILED_deployment.log" || log_message "Failed to upload failure log to S3"
  exit 1
fi
log_message "Deployment commands executed successfully."

# Unset exported variables (optional cleanup)
unset DEPLOY_DIR LOG_FILE CHECKOUT_COMMAND

################################################################################
# RESTART SERVICES
################################################################################

log_message "Restarting services..."
# Run restarts as root (usually required)
# Log stderr as well
log_message "Restarting supervisor..."
service supervisor restart >> "$LOG_FILE" 2>&1 || log_message "Warning: Failed to restart supervisor."
log_message "Restarting apache2..."
service apache2 restart >> "$LOG_FILE" 2>&1 || log_message "Warning: Failed to restart apache2."

################################################################################
# BRING APP BACK ONLINE
################################################################################

if $TAKE_DOWN_APP; then
  log_message "Bringing app out of maintenance mode..."
  # Log stderr as well
  sudo -u "$EXEC_USER" php "$DEPLOY_DIR/artisan" up >> "$LOG_FILE" 2>&1 || log_message "Warning: 'artisan up' command failed or produced errors."
fi

################################################################################
# UPLOAD LOG FILE TO S3
################################################################################

# ACTION: Replace with your actual S3 bucket name or pass as parameter
S3_BUCKET="your-log-bucket-name"
# Use the specific log file name for this run
S3_PATH="deployment-logs/$ENVIRONMENT/$(basename "$LOG_FILE")"

log_message "Uploading log file to s3://${S3_BUCKET}/${S3_PATH}"
# Run as current user (root via SSM) which should have IAM permissions
aws s3 cp "$LOG_FILE" "s3://${S3_BUCKET}/${S3_PATH}" || {
  log_message "ERROR: Failed to upload log to S3. Please check permissions and bucket/path."
  # Decide if this should be a fatal error
  # exit 1
}

################################################################################
# FINAL LOG DUMP
################################################################################

log_message "Deployment complete. Final log content follows:"
# Dump log content to stdout for SSM/Azure Pipelines visibility
cat "$LOG_FILE"
exit 0
