#!/bin/bash
set -e

################################################################################
# CONFIGURATION
################################################################################

DEPLOY_DIR="/var/www/html"
BACKUP_DIR="/var/www/backups"
SERVICE_USER="sapservice"
LOG_DIR="/var/log/app_log"
LOG_FILE="$LOG_DIR/deployment_$(date +%Y%m%d_%H%M%S).log"

################################################################################
# PARAMETER VALIDATION
################################################################################

if [ "$#" -lt 2 ]; then
  echo "Usage: $0 <version_tag> <environment>" | tee -a "$LOG_FILE"
  exit 1
fi

VERSION_TAG="$1"
ENVIRONMENT="$2"

################################################################################
# LOGGING SETUP
################################################################################

mkdir -p "$LOG_DIR"
chmod 755 "$LOG_DIR"
touch "$LOG_FILE"
chmod 666 "$LOG_FILE"
ln -sf "$LOG_FILE" "$LOG_DIR/latest.log"  # Symlink to latest log

log_message() {
  local timestamp
  timestamp=$(date +%Y-%m-%d_%H:%M:%S)
  echo "[$timestamp] $1" | tee -a "$LOG_FILE"
}

log_message "=== Deployment started for ENV=$ENVIRONMENT, VERSION_TAG=$VERSION_TAG ==="

################################################################################
# DETERMINE EXECUTION USER
################################################################################

if id "$SERVICE_USER" &>/dev/null; then
  EXEC_USER="$SERVICE_USER"
  log_message "Using service user '$SERVICE_USER' for application deployment"
else
  EXEC_USER="root"
  log_message "Service user not found. Proceeding as root"
fi

################################################################################
# BACKUP
################################################################################

mkdir -p "$BACKUP_DIR"
BACKUP_FILE="$BACKUP_DIR/html_backup_$(date +%Y%m%d%H%M%S).tar.gz"
log_message "Backup started: $BACKUP_FILE"

cd /var/www || { log_message "Error: Cannot cd to /var/www"; exit 1; }

BACKUP_START_TIME=$(date +%Y-%m-%d_%H:%M:%S)

if ! tar --exclude='html/storage' -czf "$BACKUP_FILE" html; then
  log_message "Error: Backup failed at $BACKUP_START_TIME"
  exit 1
fi

BACKUP_END_TIME=$(date +%Y-%m-%d_%H:%M:%S)
log_message "Backup completed at: $BACKUP_END_TIME"

################################################################################
# PREPARE GIT CHECKOUT COMMAND
################################################################################

TAKE_DOWN_APP=false
CHECKOUT_COMMAND=""

if [ "$ENVIRONMENT" != "prod" ]; then
  BRANCH_NAME="${VERSION_TAG}-branch"
  if sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
    log_message "Branch '$BRANCH_NAME' exists. Will checkout."
    CHECKOUT_COMMAND="git checkout $BRANCH_NAME"
  else
    log_message "Creating branch '$BRANCH_NAME' from tag '$VERSION_TAG'"
    CHECKOUT_COMMAND="git checkout tags/$VERSION_TAG -b $BRANCH_NAME"
    TAKE_DOWN_APP=true
  fi
else
  if ! sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" rev-parse "$VERSION_TAG" >/dev/null 2>&1; then
    log_message "Tag '$VERSION_TAG' not found locally. Fetching..."
    sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" fetch --tags
    if ! sudo -u "$EXEC_USER" git -C "$DEPLOY_DIR" rev-parse "$VERSION_TAG" >/dev/null 2>&1; then
      log_message "Tag '$VERSION_TAG' still not found. Aborting."
      exit 1
    fi
  fi
  log_message "Will checkout production tag: $VERSION_TAG"
  CHECKOUT_COMMAND="git checkout tags/$VERSION_TAG"
fi

################################################################################
# APP MAINTENANCE MODE (IF NEEDED)
################################################################################

if $TAKE_DOWN_APP; then
  log_message "Putting application into maintenance mode..."
  sudo -u "$EXEC_USER" php "$DEPLOY_DIR/artisan" down 2>&1 | tee -a "$LOG_FILE"
fi

################################################################################
# DEPLOYMENT EXECUTION AS sapservice OR root
################################################################################

DEPLOY_CMDS=$(cat <<EOF
#!/bin/bash
set -e
cd "$DEPLOY_DIR"
log() {
  echo "[$(date +%Y-%m-%d_%H:%M:%S)] \$1" | tee -a "$LOG_FILE"
}
log "Fetching from Git..."
git fetch
log "Checking out: $CHECKOUT_COMMAND"
$CHECKOUT_COMMAND
log "Installing composer dependencies"
composer install --no-interaction --prefer-dist --optimize-autoloader
log "Running migrations"
php artisan migrate --force
log "Clearing cache"
php artisan cache:clear
php artisan route:clear
php artisan config:clear
php artisan view:clear
EOF
)

echo "$DEPLOY_CMDS" > /tmp/deploy_tmp.sh
chmod +x /tmp/deploy_tmp.sh
log_message "Executing deployment as $EXEC_USER"
sudo -u "$EXEC_USER" bash /tmp/deploy_tmp.sh || { log_message "Deployment failed"; exit 1; }
rm -f /tmp/deploy_tmp.sh

################################################################################
# RESTART SERVICES
################################################################################

log_message "Restarting services"
service supervisor restart 2>&1 | tee -a "$LOG_FILE"
service apache2 restart 2>&1 | tee -a "$LOG_FILE"

################################################################################
# BRING APP BACK ONLINE
################################################################################

if $TAKE_DOWN_APP; then
  log_message "Bringing app out of maintenance mode..."
  sudo -u "$EXEC_USER" php "$DEPLOY_DIR/artisan" up 2>&1 | tee -a "$LOG_FILE"
fi

################################################################################
# UPLOAD LOG FILE TO S3
################################################################################

S3_BUCKET="your-log-bucket-name"
S3_PATH="deployment-logs/$ENVIRONMENT/deployment.log"

log_message "Uploading log file to s3://${S3_BUCKET}/${S3_PATH}"
aws s3 cp "$LOG_FILE" "s3://${S3_BUCKET}/${S3_PATH}" || {
  log_message "Failed to upload log to S3"
  exit 1
}

################################################################################
# FINAL LOG DUMP
################################################################################

log_message "Deployment complete. Showing full log:"
cat "$LOG_FILE"
exit 0
