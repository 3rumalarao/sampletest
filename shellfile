#!/bin/bash
set -e  # Exit immediately on any command failure

################################################################################
# CONFIGURATION SECTION
################################################################################

# Directories and file paths
DEPLOY_DIR="/var/www/html"
BACKUP_DIR="/var/www/backups"
SERVICE_USER="sapservice"
LOG_DIR="/var/log/app_log"
LOG_FILE="$LOG_DIR/deployment_$(date +%Y%m%d).log"

# --- Parameter Check ---
# Usage: your_deployment_script.sh <version_tag> <environment>
#   version_tag: For prod, a tag is used. For dev/qa/uat, the tag is used to create a branch.
#   environment: One of dev, qa, uat, or prod.
if [ "$#" -lt 2 ]; then
  echo "Usage: $0 <version_tag> <environment>" | tee -a "$LOG_FILE"
  exit 1
fi

VERSION_TAG="$1"
ENVIRONMENT="$2"  # Expected values: dev, qa, uat, prod

################################################################################
# SETUP LOGGING
################################################################################

# Create the log directory and file if they do not exist
mkdir -p "$LOG_DIR"
chmod 755 "$LOG_DIR"
if [ ! -f "$LOG_FILE" ]; then
  touch "$LOG_FILE"
  chmod 777 "$LOG_FILE"
fi

# Logging function: writes messages with a timestamp to both STDOUT and the log file.
log_message() {
  local timestamp
  timestamp=$(date +%Y-%m-%d_%H:%M:%S)
  echo "[$timestamp] $1" | tee -a "$LOG_FILE"
}

log_message "=== Deployment script started for ENV=$ENVIRONMENT, VERSION_TAG=$VERSION_TAG ==="

################################################################################
# DETERMINE EXECUTION USER
################################################################################

# Use the sapservice account if it exists; otherwise, run as root.
if id "$SERVICE_USER" &>/dev/null; then
  EXEC_USER="$SERVICE_USER"
  log_message "Service account '$SERVICE_USER' found. Deployment will use this account."
else
  EXEC_USER="root"
  log_message "Service account '$SERVICE_USER' not found. Deployment will use root."
fi

################################################################################
# CREATE A BACKUP
################################################################################

mkdir -p "$BACKUP_DIR" || { log_message "Error: Could not create backup directory"; exit 1; }
BACKUP_FILE="$BACKUP_DIR/html_backup_$(date +%Y%m%d%H%M%S).tar.gz"
log_message "Creating backup: $BACKUP_FILE"

# Change directories and create the backup archive (excluding any 'storage' directory)
cd "$DEPLOY_DIR" || { log_message "Error: Cannot change to deploy directory $DEPLOY_DIR"; exit 1; }
cd /var/www || { log_message "Error: Cannot change to /var/www"; exit 1; }
start_time=$(date +%Y-%m-%d_%H:%M:%S)
log_message "Backup process started at: $start_time"
tar --exclude='html/storage' -czvf "$BACKUP_FILE" "html" 2>&1 | tee -a "$LOG_FILE" || {
  log_message "Error: Backup creation failed. Aborting deployment."
  exit 1
}
end_time=$(date +%Y-%m-%d_%H:%M:%S)
log_message "Backup process finished at: $end_time"
cd "$DEPLOY_DIR" || { log_message "Error: Cannot change back to deploy directory $DEPLOY_DIR"; exit 1; }

################################################################################
# GIT OPERATIONS (BRANCH for non-prod, TAG for prod)
################################################################################

TAKE_DOWN_APP=false  # Flag for taking the app offline if needed

if [ "$ENVIRONMENT" != "prod" ]; then
  # For dev/qa/uat, create (or check out) a branch named as <version_tag>-branch.
  BRANCH_NAME="${VERSION_TAG}-branch"
  if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
    log_message "Branch '$BRANCH_NAME' exists. Checking it out..."
    CHECKOUT_COMMAND="git checkout $BRANCH_NAME"
  else
    log_message "Creating branch '$BRANCH_NAME' from tag '$VERSION_TAG'..."
    CHECKOUT_COMMAND="git checkout tags/$VERSION_TAG -b $BRANCH_NAME"
    TAKE_DOWN_APP=true
  fi
else
  # For production, verify that the tag exists and use it directly.
  if ! git show-ref --tags "$VERSION_TAG" >/dev/null 2>&1; then
    log_message "Tag '$VERSION_TAG' not found locally. Fetching tags..."
    git fetch --tags
    if ! git show-ref --tags "$VERSION_TAG" >/dev/null 2>&1; then
      log_message "Error: Tag '$VERSION_TAG' still not found. Aborting deployment."
      exit 1
    fi
  fi
  log_message "Checking out tag '$VERSION_TAG'..."
  CHECKOUT_COMMAND="git checkout tags/$VERSION_TAG"
fi

################################################################################
# TAKE THE APPLICATION DOWN (IF NECESSARY)
################################################################################

if $TAKE_DOWN_APP; then
  log_message "Taking the application down..."
  php artisan down 2>&1 | tee -a "$LOG_FILE"
fi

################################################################################
# DEPLOYMENT COMMANDS BLOCK
################################################################################

# Build the block of commands to be executed (as either the service user or root).
DEPLOY_CMDS=$(cat <<'EOF'
set -e
log_message() {
  local ts
  ts=$(date +%Y-%m-%d_%H:%M:%S)
  echo "[$ts] $1" | tee -a "'"$LOG_FILE"'"
}
cd "'"$DEPLOY_DIR"'" || { log_message "Error: Cannot change directory"; exit 1; }
log_message "Running: git fetch"
git fetch 2>&1 | tee -a "'"$LOG_FILE"'"
log_message "Executing checkout command: '"$CHECKOUT_COMMAND"'"
'"$CHECKOUT_COMMAND"' 2>&1 | tee -a "'"$LOG_FILE"'"
log_message "Running: composer install"
composer install 2>&1 | tee -a "'"$LOG_FILE"'"
log_message "Running: php artisan migrate"
php artisan migrate 2>&1 | tee -a "'"$LOG_FILE"'"
log_message "Clearing cache, routes, config, and views"
php artisan cache:clear 2>&1 | tee -a "'"$LOG_FILE"'"
php artisan route:clear 2>&1 | tee -a "'"$LOG_FILE"'"
php artisan config:clear 2>&1 | tee -a "'"$LOG_FILE"'"
php artisan view:clear 2>&1 | tee -a "'"$LOG_FILE"'"
EOF
)

# Execute deployment commands under the correct user
if [ "$EXEC_USER" = "root" ]; then
  log_message "Executing deployment commands as root"
  bash -c "$DEPLOY_CMDS"
else
  log_message "Executing deployment commands as service user: $EXEC_USER"
  su - "$EXEC_USER" -c "$DEPLOY_CMDS"
fi

################################################################################
# RESTART SERVICES
################################################################################

log_message "Restarting supervisor service"
service supervisor restart 2>&1 | tee -a "$LOG_FILE" || { log_message "Error restarting supervisor service"; exit 1; }
log_message "Restarting apache2 service"
service apache2 restart 2>&1 | tee -a "$LOG_FILE" || { log_message "Error restarting apache2 service"; exit 1; }

if $TAKE_DOWN_APP; then
  log_message "Bringing the application back online..."
  php artisan up 2>&1 | tee -a "$LOG_FILE" || { log_message "Error: Failed to bring the application online"; exit 1; }
fi

################################################################################
# FINAL LOG DISPLAY
################################################################################

log_message "Deployment completed. Displaying complete log contents:"
cat "$LOG_FILE"
exit 0
