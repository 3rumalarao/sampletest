trigger: none # Manual trigger only

pool:
  vmImage: ubuntu-latest # This pool is for the Azure Pipelines agent

parameters:
- name: environment
  displayName: Environment
  type: string
  default: dev
  values:
  - dev
  - uat
  - prod
- name: sourceRef
  displayName: 'Branch (for dev/uat) or Tag (for prod)'
  type: string
  default: main
- name: awsCredentials
  displayName: 'AWS Service Connection Name'
  type: string
  default: 'YOUR_AWS_SERVICE_CONNECTION_NAME' # Replace with your default connection name
- name: awsRegion
  displayName: 'AWS Region'
  type: string
  default: 'us-east-1' # Replace with your default AWS region
- name: s3LogBucket
  displayName: 'S3 Log Bucket Name'
  type: string
  default: 'your-log-bucket-name' # Replace with your S3 bucket name
- name: s3LogPrefix
  displayName: 'S3 Log Prefix (optional)'
  type: string
  default: 'deployment-logs'
- name: prodInstanceIds
  displayName: 'Production EC2 Instance IDs (comma-separated)'
  type: string
  default: 'i-prod-instance1,i-prod-instance2' # Replace with your prod instance IDs
- name: uatInstanceIds
  displayName: 'UAT EC2 Instance IDs (comma-separated)'
  type: string
  default: 'i-uat-instance1' # Replace with your UAT instance IDs
- name: devInstanceIds
  displayName: 'Development EC2 Instance IDs (comma-separated)'
  type: string
  default: 'i-dev-instance1' # Replace with your dev instance IDs

stages:
- stage: Deploy
  displayName: Deploy to ${{ parameters.environment }}
  jobs:
  - job: RunDeploymentScript
    displayName: 'Execute Deployment Script on EC2'
    steps:
    - script: echo "Deploying to ${{ parameters.environment }} using ref: ${{ parameters.sourceRef }}"
      displayName: 'Print Deployment Information'

    - task: SystemsManagerRunCommand@1
      displayName: "Perform Deployment on EC2"
      inputs:
        awsCredentials: ${{ parameters.awsCredentials }} # Correct property name
        regionName: ${{ parameters.awsRegion }} # Correct property name
        documentName: 'AWS-RunShellScript'
        instanceIds: | # Correct property name
          ${{ parameters.prodInstanceIds }}
          ${{ parameters.uatInstanceIds }}
          ${{ parameters.devInstanceIds }}
        documentParameters: |
          {
            "commands": [
              "/var/snap/amazon-ssm-agent/current/your_deployment_script.sh \"${{ parameters.sourceRef }} ${{ parameters.environment }}\""
            ],
            "workingDirectory": "/tmp"
          }
        # targets: 'INSTANCE_IDS' # Removed incorrect property
        # targetType: 'InstanceId' # Removed incorrect property
      env:
        PRODUCTION_INSTANCE_IDS: ${{ parameters.prodInstanceIds }}
        UAT_INSTANCE_IDS: ${{ parameters.uatInstanceIds }}
        DEV_INSTANCE_IDS: ${{ parameters.devInstanceIds }}
      continueOnError: true # Allow the task to complete even if there are errors in the script

  - job: DisplayDeploymentLogs
    displayName: 'Display Deployment Logs'
    dependsOn: RunDeploymentScript
    steps:
    - task: AWSCLI@1 # Corrected task name
      displayName: 'Download Deployment Log File'
      inputs:
        awsCredentials: ${{ parameters.awsCredentials }} # Correct property name
        regionName: ${{ parameters.awsRegion }} # Correct property name
        command: 'aws s3 cp s3://${{ parameters.s3LogBucket }}/${{ parameters.s3LogPrefix }}/${{ parameters.environment }}/deployment_*.log $(Build.ArtifactStagingDirectory)/'
      condition: succeededOrFailed() # Run this even if the deployment failed

    - script: |
        echo "##[section] --- Deployment Logs from EC2 (${{ parameters.environment }}) ---"
        LOG_FILES=$(ls -p "$(Build.ArtifactStagingDirectory)/deployment_*.log" 2>/dev/null | grep -v /)
        if [ -n "$LOG_FILES" ]; then
          cat "$(Build.ArtifactStagingDirectory)/deployment_*.log"
        else
          echo "No deployment log file found in the expected location for ${{ parameters.environment }}."
        fi
      displayName: 'Display Log File Content'
